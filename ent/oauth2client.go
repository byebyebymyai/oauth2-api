// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/byebyebymyai/oauth2-api/ent/oauth2client"
	"github.com/google/uuid"
)

// Oauth2Client is the model entity for the Oauth2Client schema.
type Oauth2Client struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret string `json:"secret,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain       string `json:"domain,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Oauth2Client) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauth2client.FieldSecret, oauth2client.FieldDomain:
			values[i] = new(sql.NullString)
		case oauth2client.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Oauth2Client fields.
func (o *Oauth2Client) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauth2client.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case oauth2client.FieldSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				o.Secret = value.String
			}
		case oauth2client.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				o.Domain = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Oauth2Client.
// This includes values selected through modifiers, order, etc.
func (o *Oauth2Client) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this Oauth2Client.
// Note that you need to call Oauth2Client.Unwrap() before calling this method if this Oauth2Client
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Oauth2Client) Update() *Oauth2ClientUpdateOne {
	return NewOauth2ClientClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Oauth2Client entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Oauth2Client) Unwrap() *Oauth2Client {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Oauth2Client is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Oauth2Client) String() string {
	var builder strings.Builder
	builder.WriteString("Oauth2Client(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("secret=")
	builder.WriteString(o.Secret)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(o.Domain)
	builder.WriteByte(')')
	return builder.String()
}

// GetID returns the ID of the Oauth2Client.
func (o *Oauth2Client) GetID() string {
	return o.ID.String()
}

// GetSecret returns the secret of the Oauth2Client.
func (o *Oauth2Client) GetSecret() string {
	return o.Secret
}

// GetDomain returns the domain of the Oauth2Client.
func (o *Oauth2Client) GetDomain() string {
	return o.Domain
}

// IsPublic returns whether the Oauth2Client is public.
func (o *Oauth2Client) IsPublic() bool {
	return o.Secret == ""
}

// GetUserID returns the user ID of the Oauth2Client.
func (o *Oauth2Client) GetUserID() string {
	return ""
}

// implement ClientPasswordVerifier
func (o *Oauth2Client) VerifyPassword(password string) bool {
	return o.Secret == password
}

// Oauth2Clients is a parsable slice of Oauth2Client.
type Oauth2Clients []*Oauth2Client
