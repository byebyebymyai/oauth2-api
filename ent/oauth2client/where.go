// Code generated by ent, DO NOT EDIT.

package oauth2client

import (
	"entgo.io/ent/dialect/sql"
	"github.com/byebyebymyai/oauth2-api/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldLTE(FieldID, id))
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldEQ(FieldSecret, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldEQ(FieldDomain, v))
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldEQ(FieldSecret, v))
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldNEQ(FieldSecret, v))
}

// SecretIn applies the In predicate on the "secret" field.
func SecretIn(vs ...string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldIn(FieldSecret, vs...))
}

// SecretNotIn applies the NotIn predicate on the "secret" field.
func SecretNotIn(vs ...string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldNotIn(FieldSecret, vs...))
}

// SecretGT applies the GT predicate on the "secret" field.
func SecretGT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldGT(FieldSecret, v))
}

// SecretGTE applies the GTE predicate on the "secret" field.
func SecretGTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldGTE(FieldSecret, v))
}

// SecretLT applies the LT predicate on the "secret" field.
func SecretLT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldLT(FieldSecret, v))
}

// SecretLTE applies the LTE predicate on the "secret" field.
func SecretLTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldLTE(FieldSecret, v))
}

// SecretContains applies the Contains predicate on the "secret" field.
func SecretContains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldContains(FieldSecret, v))
}

// SecretHasPrefix applies the HasPrefix predicate on the "secret" field.
func SecretHasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldHasPrefix(FieldSecret, v))
}

// SecretHasSuffix applies the HasSuffix predicate on the "secret" field.
func SecretHasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldHasSuffix(FieldSecret, v))
}

// SecretEqualFold applies the EqualFold predicate on the "secret" field.
func SecretEqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldEqualFold(FieldSecret, v))
}

// SecretContainsFold applies the ContainsFold predicate on the "secret" field.
func SecretContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldContainsFold(FieldSecret, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.FieldContainsFold(FieldDomain, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Oauth2Client) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Oauth2Client) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Oauth2Client) predicate.Oauth2Client {
	return predicate.Oauth2Client(sql.NotPredicates(p))
}
