// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/byebyebymyai/oauth2-api/ent/oauth2client"
	"github.com/google/uuid"
)

// Oauth2ClientCreate is the builder for creating a Oauth2Client entity.
type Oauth2ClientCreate struct {
	config
	mutation *Oauth2ClientMutation
	hooks    []Hook
}

// SetSecret sets the "secret" field.
func (oc *Oauth2ClientCreate) SetSecret(s string) *Oauth2ClientCreate {
	oc.mutation.SetSecret(s)
	return oc
}

// SetDomain sets the "domain" field.
func (oc *Oauth2ClientCreate) SetDomain(s string) *Oauth2ClientCreate {
	oc.mutation.SetDomain(s)
	return oc
}

// SetID sets the "id" field.
func (oc *Oauth2ClientCreate) SetID(u uuid.UUID) *Oauth2ClientCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *Oauth2ClientCreate) SetNillableID(u *uuid.UUID) *Oauth2ClientCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// Mutation returns the Oauth2ClientMutation object of the builder.
func (oc *Oauth2ClientCreate) Mutation() *Oauth2ClientMutation {
	return oc.mutation
}

// Save creates the Oauth2Client in the database.
func (oc *Oauth2ClientCreate) Save(ctx context.Context) (*Oauth2Client, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *Oauth2ClientCreate) SaveX(ctx context.Context) *Oauth2Client {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *Oauth2ClientCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *Oauth2ClientCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *Oauth2ClientCreate) defaults() {
	if _, ok := oc.mutation.ID(); !ok {
		v := oauth2client.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *Oauth2ClientCreate) check() error {
	if _, ok := oc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`ent: missing required field "Oauth2Client.secret"`)}
	}
	if v, ok := oc.mutation.Secret(); ok {
		if err := oauth2client.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Oauth2Client.secret": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "Oauth2Client.domain"`)}
	}
	if v, ok := oc.mutation.Domain(); ok {
		if err := oauth2client.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Oauth2Client.domain": %w`, err)}
		}
	}
	return nil
}

func (oc *Oauth2ClientCreate) sqlSave(ctx context.Context) (*Oauth2Client, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *Oauth2ClientCreate) createSpec() (*Oauth2Client, *sqlgraph.CreateSpec) {
	var (
		_node = &Oauth2Client{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(oauth2client.Table, sqlgraph.NewFieldSpec(oauth2client.FieldID, field.TypeUUID))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.Secret(); ok {
		_spec.SetField(oauth2client.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := oc.mutation.Domain(); ok {
		_spec.SetField(oauth2client.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	return _node, _spec
}

// Oauth2ClientCreateBulk is the builder for creating many Oauth2Client entities in bulk.
type Oauth2ClientCreateBulk struct {
	config
	err      error
	builders []*Oauth2ClientCreate
}

// Save creates the Oauth2Client entities in the database.
func (ocb *Oauth2ClientCreateBulk) Save(ctx context.Context) ([]*Oauth2Client, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Oauth2Client, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*Oauth2ClientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *Oauth2ClientCreateBulk) SaveX(ctx context.Context) []*Oauth2Client {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *Oauth2ClientCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *Oauth2ClientCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
