// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/byebyebymyai/oauth2-api/ent/oauth2client"
	"github.com/byebyebymyai/oauth2-api/ent/predicate"
)

// Oauth2ClientUpdate is the builder for updating Oauth2Client entities.
type Oauth2ClientUpdate struct {
	config
	hooks    []Hook
	mutation *Oauth2ClientMutation
}

// Where appends a list predicates to the Oauth2ClientUpdate builder.
func (ou *Oauth2ClientUpdate) Where(ps ...predicate.Oauth2Client) *Oauth2ClientUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetSecret sets the "secret" field.
func (ou *Oauth2ClientUpdate) SetSecret(s string) *Oauth2ClientUpdate {
	ou.mutation.SetSecret(s)
	return ou
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (ou *Oauth2ClientUpdate) SetNillableSecret(s *string) *Oauth2ClientUpdate {
	if s != nil {
		ou.SetSecret(*s)
	}
	return ou
}

// SetDomain sets the "domain" field.
func (ou *Oauth2ClientUpdate) SetDomain(s string) *Oauth2ClientUpdate {
	ou.mutation.SetDomain(s)
	return ou
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ou *Oauth2ClientUpdate) SetNillableDomain(s *string) *Oauth2ClientUpdate {
	if s != nil {
		ou.SetDomain(*s)
	}
	return ou
}

// Mutation returns the Oauth2ClientMutation object of the builder.
func (ou *Oauth2ClientUpdate) Mutation() *Oauth2ClientMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *Oauth2ClientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *Oauth2ClientUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *Oauth2ClientUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *Oauth2ClientUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *Oauth2ClientUpdate) check() error {
	if v, ok := ou.mutation.Secret(); ok {
		if err := oauth2client.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Oauth2Client.secret": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Domain(); ok {
		if err := oauth2client.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Oauth2Client.domain": %w`, err)}
		}
	}
	return nil
}

func (ou *Oauth2ClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauth2client.Table, oauth2client.Columns, sqlgraph.NewFieldSpec(oauth2client.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Secret(); ok {
		_spec.SetField(oauth2client.FieldSecret, field.TypeString, value)
	}
	if value, ok := ou.mutation.Domain(); ok {
		_spec.SetField(oauth2client.FieldDomain, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauth2client.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// Oauth2ClientUpdateOne is the builder for updating a single Oauth2Client entity.
type Oauth2ClientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Oauth2ClientMutation
}

// SetSecret sets the "secret" field.
func (ouo *Oauth2ClientUpdateOne) SetSecret(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetSecret(s)
	return ouo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (ouo *Oauth2ClientUpdateOne) SetNillableSecret(s *string) *Oauth2ClientUpdateOne {
	if s != nil {
		ouo.SetSecret(*s)
	}
	return ouo
}

// SetDomain sets the "domain" field.
func (ouo *Oauth2ClientUpdateOne) SetDomain(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetDomain(s)
	return ouo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ouo *Oauth2ClientUpdateOne) SetNillableDomain(s *string) *Oauth2ClientUpdateOne {
	if s != nil {
		ouo.SetDomain(*s)
	}
	return ouo
}

// Mutation returns the Oauth2ClientMutation object of the builder.
func (ouo *Oauth2ClientUpdateOne) Mutation() *Oauth2ClientMutation {
	return ouo.mutation
}

// Where appends a list predicates to the Oauth2ClientUpdate builder.
func (ouo *Oauth2ClientUpdateOne) Where(ps ...predicate.Oauth2Client) *Oauth2ClientUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *Oauth2ClientUpdateOne) Select(field string, fields ...string) *Oauth2ClientUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Oauth2Client entity.
func (ouo *Oauth2ClientUpdateOne) Save(ctx context.Context) (*Oauth2Client, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *Oauth2ClientUpdateOne) SaveX(ctx context.Context) *Oauth2Client {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *Oauth2ClientUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *Oauth2ClientUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *Oauth2ClientUpdateOne) check() error {
	if v, ok := ouo.mutation.Secret(); ok {
		if err := oauth2client.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Oauth2Client.secret": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Domain(); ok {
		if err := oauth2client.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Oauth2Client.domain": %w`, err)}
		}
	}
	return nil
}

func (ouo *Oauth2ClientUpdateOne) sqlSave(ctx context.Context) (_node *Oauth2Client, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauth2client.Table, oauth2client.Columns, sqlgraph.NewFieldSpec(oauth2client.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Oauth2Client.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauth2client.FieldID)
		for _, f := range fields {
			if !oauth2client.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauth2client.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Secret(); ok {
		_spec.SetField(oauth2client.FieldSecret, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Domain(); ok {
		_spec.SetField(oauth2client.FieldDomain, field.TypeString, value)
	}
	_node = &Oauth2Client{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauth2client.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
